// ========================================================================
// Base class for an un-systematically shifted (i.e. CV) universe.  Implement
// your own base class with the functions you need. I've implemented GetEnu(),
// GetMuonE() and GetHadronE() as examples: you'll have other variables you
// want.
//
// To add a systematic, inherit from this class and override whichever
// functions you need to. For a "vertical" error, this will mean overriding the
// GetWeight() function to modify the event weight. For a "lateral" error, this
// will mean overriding the function that calculates the quantity that is being
// shifted (muon energy, or hadronic energy or whatever).
//
// For examples of each of those two cases, see ./LateralSystematics.h and
// PlotUtils/GenieSystematics.h. For an example of how to put the whole thing
// together and actually *use* the classes, see the runUniverseShift.C macro in
// this directory. `root -l runUniverseShift.C+`
// ========================================================================

#include "PlotUtils/MinervaUniverse.h"
#include "PlotUtils/ChainWrapper.h"
#include <iostream>
#include "TMath.h"

#ifndef HELIUMCVUNIVERSE_H
#define HELIUMCVUNIVERSE_H

#include "HeliumDefaults.h"
#include "HeliumUtils.h"
#include "HeliumCuts.h"
#include "PlotUtils/FluxSystematics.h"
#include "PlotUtils/FluxReweighter.h"
#include "PlotUtils/MinosMuonEfficiencyCorrection.h"
#include "PlotUtils/weightMK.h"
#include <TDatabasePDG.h>
#include <assert.h>

class HeliumPlayListInfo;

namespace Helium_PDG {

const int pdg_Pi0 = 111;
const int pdg_neutron = 2112;
const int pdg_antineutron = -2112;
const int pdg_Genie_bindingE = 2000000101;
const int pdg_Sigma0 = 3212;
const int pdg_antiSigma0 = -3212;
const int pdg_Lambda0 = 3122;
const int pdg_antiLambda0 = -3122;
const int pdg_Nu_e = 12;
const int pdg_Nu_mu = 14;
const int pdg_Proton = 2212;
const int pdg_Pion_neg = -211;
const int pdg_Pion_pos = 211;
const int pdg_Photon = 22;
}

namespace HelicityType {
enum t_HelicityType { kAny = 0, kNeutrino, kAntiNeutrino };
};

class HeliumCVUniverse : public PlotUtils::MinervaUniverse {
 public:
#include "PlotUtils/WeightFunctions.h"
#include "PlotUtils/MuonFunctions.h"
//#include "PlotUtils/TruthFunctions.h"
#include "PlotUtils/TargetUtils.h"
#include "PlotUtils/RecoilEnergyFunctions.h"
  //#include "PlotUtils/RecoilEnergyFunctions.h"
  //#include "PlotUtils/PhysicsVariables.h"

  HeliumCVUniverse(PlotUtils::ChainWrapper *chw, double nsigma = 0)
      : PlotUtils::MinervaUniverse(chw, nsigma) {}

  // Destructor
  virtual ~HeliumCVUniverse() {}

  // All functions we write here should be 'virtual', so that the universes
  // that inherit from CVUniverse can override them.
  // virtual bool IsInFiducalVolumeFromtheInnerEdge(double Min_distance_toShell
  // ) const ;
  // ========================================================================
  // Get Weight
  //
  // We override the various weight getting functions herein in different
  // vertical systematic universe classes.
  // ========================================================================
  virtual double GetWeight(HeliumPlayListInfo info) const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetWeight(Weights kweight) const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetWeight(std::vector<Weights> kweight) const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetTruthWeightFlux() const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ3() const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ0() const;
  ////////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ2() const;
  ////////////////////////////////////////////////////////////////////////////////
  // virtual double GetThetamu()const;
  // virtual double GetPmu() const;
  virtual double GetPmu_inhouse() const;
  // virtual double GetEmu() const;      /* MeV */
  virtual double GetTRUE_Phimu() const;
  // ========================================================================
  // Get Variable Functions
  // Write a virtual "Get" function for _any_ variable (coming directly from a
  // branch, or composed of several branches) that will be laterally shifted
  // or affected by the lateral shift of a systematic universe.
  //
  // We override some or all of these function in different systematic
  // universe classes located in LateralSystematics.h.
  // ========================================================================
  virtual Interaction_type Get_InteractionStackType() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual Interaction_type Get_Interaction_withDISbreakdown() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual Interaction_type Get_Interaction_withDISbreakdown_AnaDev() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual Material_type Get_MaterialStackType() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual Particle_type Get_NonParticleStackType(int trk) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual Particle_type Get_ParticleStackType_leadingandnonleading(int trk) const;
  virtual CryoTank_REGIONS Get_RECO_CryoTank_region() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual CryoTank_REGIONS Get_TRUE_CryoTank_region() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetDummyVar() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertexChiSqrFit() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool GetboolIsUsableMuon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetIntIsusableMuon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetOpenAngle(int TRKNum) const;
  //////////////////////////////////////////////////////////////
  /// Vetowall
  /////////////////////////////////////////////////////////////
  virtual bool Getextrapnowalls() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual bool Getextrapwall1() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual bool Getextrapwall2() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual bool Getextrapbothwalls() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual bool GetMuonTrkMatchToVETOwalloff() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetNumberMatchToVeto() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetMatchToVeto() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetSixPush() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetTracksize() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual TrackType GetTrackType() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetLongAnchorTrackStatus() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetShortAnchorTrackStatus() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetOtherLongTrackStatus() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool GetVertex_option1() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual bool GetVertex_option2() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual bool GetVertex_option3() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual bool GetisOneTrk() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual bool GetisTwoTrk() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual bool GetisGreaterTwoTrk() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual boolNTrack GetVertex_boolNTrack() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual VertexOptions GetVertex_optionType() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetTRUERegionSliceHelium() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetTRUERegion12DAISY_SliceHelium() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetRECORegionSliceHelium() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetTRUERegion12DAISY_MasterAna() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetRECORegion12DAISY_MasterAna() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetTRUERegionSliceMasterAna() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual FluxSlices GetRECORegionSliceMasterAna() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetDistance_vertex_toUpStreamBulge() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetDistance_vertex_toDownStreamBulge() const;
    //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////
  /// GET Muon INFO
  /////////////////////////////////////////////////////////////
  //! Is the true vertex far enough away form a division of target sections?
  virtual bool PassTrueDistToDivisionCut(double xySep = 25.);
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVetoTotEff() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVetoTotAcc() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVetoAccpetedWeigh() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonE_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetVector_PMTVeto_Map() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPmu_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPz() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPz_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPx() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPx_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPy_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPt() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPt_ECT() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonP_three_momentum_absolute() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertex_x() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertex_y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertex_z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertex_r() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVertex_rr() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ VertexPostion() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetCurvatureSignificance() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetmuAngleWRTB() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetmuAngleWRTB_Degs() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetChargemu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetDOCAmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOS_Energy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSStart_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSStart_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSStart_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSEnd_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSEnd_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMINOSEnd_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_firstNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_firstNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_firstNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_lastNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_lastNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuon_lastNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_firstNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_firstNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_firstNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_lastNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_lastNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_lastNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_firstNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_firstNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_firstNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_lastNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_lastNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_RecoilVector_lastNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_GetNonmuTrkLength_InMinerva_Incm()
      const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_GetNonmuTrkE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_NonmuTrkAngleWRTbeamMID() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetRunN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetSubRunN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetGateN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetSliceN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual SliceID GetEventSliceForData() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCRunN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCSubRunN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCGateN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCSliceN() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetEventRun() const;
  virtual double GetTotalMomentum(double px, double py, double pz) const;
  //////////////////////////////////////////////////////////////
  /// MUON TRUTH INFO
  /////////////////////////////////////////////////////////////
  virtual int Get_mc_incoming() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_mc_current() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool isHeliumInteraction() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool isAluminiumInteraction() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Emu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Pmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_PZmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_muANGLE_WRTB_DEG() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_PTmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueW() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2True_GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetEhadTrue() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2Exp() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2Exp_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2Exp_GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2Exp_AnaDev_GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetExpWTrue() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetExpWTrue_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTRUE_Tracksize() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTargetNucleon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrgNucleonMass() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double distance_betweenPoints(double x1, double y1, double z1,
                                        double x2, double y2, double z2);
//////////////////////////////////////////////////////////////////////////////
  virtual int Trajectorindex_leastdistance(double x1, double y1, double z1,
                                           std::vector<double> FinalX,
                                           std::vector<double> FinalY,
                                           std::vector<double> FinalZ);
  //////////////////////////////////////////////////////////////////////////////
  virtual int getindexTrueTrajectors_closestRECO();
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Vertex_x() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Vertex_y() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Vertex_z() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Vertex_r() const;
    ////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_Vertex_rr() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ GetTRUE_Vertex3Dpoint() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> MakeTRUE_VectorTrackLengthinMinerva_mm() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> MakeTRUE_VectorTrackLengthinMinerva_cm() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkE(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkopenangle(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkANGLE_WRTB(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkE_Parent(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkopenangle_Parent(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_NonmuTrkANGLE_WRTB_Parent(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTRUE_NonmuTrk_PDG_Parent(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetVector_nonMuonTk_PDG() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Angle_wrtb_rad() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Angle_wrtb_Degs() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Energy_MeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Energy_GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetVector_nonMuonTk_PDG_Parent() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Angle_wrtb_rad_Parent() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Angle_wrtb_Degs_Parent() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Energy_MeV_Parent() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_nonMuonTk_Energy_GeV_Parent() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GETvector_PDG_FS_particles() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Energy_mc_FS_particles() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_KE_mc_FS_particles_MeV(
  TDatabasePDG *pdg_DATABASEobject) const;
  //////////////////////////////////////////////////////////////////////////////
    virtual std::vector<double> GETvector_KE_mc_FS_particles_GeV(
      TDatabasePDG *pdg_DATABASEobject) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Px_mc_FS_particles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Py_mc_FS_particles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Pz_mc_FS_particles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_theta_wrtb_FS_particles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Energy_mc_FS_particles_MeVtoGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> FromTRUTH_branch_GetVector_lastNode_X() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> FromTRUTH_branch_GetVector_lastNode_Y() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> FromTRUTH_branch_GetVector_lastNode_Z() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double>
  FromTRUTH_branch_GetVector_ALLTrajectors_FullPathlenght() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> FromTRUTH_branch_GetVector_ALLTrajectors_PDG() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double>
  FromTRUTH_branch_GetVector_ALLTrajectors_ColumnarDensity() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> FromTRUTH_branch_GetVector_ALLTrajectors_KE()const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> FromTRUTH_branch_GetVector_ALLTrajectors_Angles()const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<Vertex_XYZ> Construct_EndPointvector_ForTRUE_FS_particle()const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_highestKE_mc_FSPart() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GET_N_PDG_FS_particles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_LowestKE_mc_FSPart() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double ThetaWRTBeam(double x, double y, double z, double bias) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Getindex2ndTrack_TRUE_highestKE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Getindex2ndTrackhighestKE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetIntactionType() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTargetType() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetNon_muon_PDG(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetresID() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Getcharm() const;
    //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////
  // Get Non MuonTrk Info
  //////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkE(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkE_GeV(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkAngleWRTbeam(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkAngleWRTbeamMID(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkAngleWRTmu(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkLength(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuDOCA(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkTimes(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetFirstNodeX(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetLastNodeX(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetFirstNodeY(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetLastNodeY(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetFirstNodeZ(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetLastNodeZ(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrackSlopeX(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrackSlopeY(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrackSlopeZ(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ FirstNodePostionsforTrack(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ slopesofTrack(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ slopesofTrack_tuple(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Vertex_XYZ slopesofTrack(int TRKNum, Vertex_XYZ vertex) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double Calculated_DOCA_FromCalSlopes(int TRKNum, Vertex_XYZ f) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double Calculated_DOCA(int TRKNum, Vertex_XYZ f) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double Calculated_DOCA_test(int TRKNum, Vertex_XYZ f) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkLength_InMinerva(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonmuTrkLength_InMinerva_Incm(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Trajector_DATA Return_Trajector_DATA_struct() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double rapidity_muon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double pseudorapidity_muon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2forMKmodel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetWforMKmodel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetCCforMKmodel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetnPartforMKmodel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetnIDstatusforMKmodel(int index) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetnIDforMKmodel(int index) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMKmodelWeight_local(weightMK *weight_MK) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Returnindex_True_2ndTk_GreatestKE_lessthanAngle(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_lessthanAngle(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_lessthanAngle_withKE_thresholdonProtonandPion(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_lessthanAngle_withKE_thresholdonProtonandPion(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist) const;
//////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_muonNotinlist(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_lessthanAngle_muonNotinlist(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Returnindex_True_2ndTk_NO_NeutralParticles_GreatestKE_lessthanAngle_muonNotinlist_KE_proton_pion_thrusthold(
      std::vector<int> PDG_trklist, std::vector<double> Energy_trklist,
      std::vector<double> Angle_trklist,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////
  /// Get TRUTH Non MuonTrk Info
  /////////////////////////////////////////////////////////////
  virtual double GetTRUENonmuTrkE(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUENonmuTrkAngleWRTbeam(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUENonmuTrkAngleWRTmu(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetPDG_2ndTrk_highestEnergy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetPDG_2ndTrk_highestTRUEEnergy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_nonMuonDOCA(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_nonMuoncolumnarDensity(int TRKNum) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPmuTransverseTrue() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPmuLongitudinalTrue() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_muANGLE_WRTB_rad() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_index_Trajector_PDG(int index) const;
  virtual Trajector GetVector_ALLTrajector() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_TrkLength() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Trajector GetVector_ALLTrajector_ForWithRecoTracks() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Trajector GetVector_ALLTrajector_ForWithRecoTracks_Parent() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Trajector_withTrueEnergyFraction
  GetVector_ALLTrajector_ForWithRecoTracks_withTrueEFraction() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual Trajector_withTrueEnergyFraction
  GetVector_ALLTrajector_ForWithRecoTracks_withTrueEFraction_Parent() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_highestKE_mc_FSPart_NO_NeutralParticles(
      std::vector<double> KE_vector, std::vector<int> pdg_vector,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_highestKE_mc_FSPart_WithDeglessthan(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_highestKE_mc_FSPart_WithDeglessthan_NO_NeutralParticles(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Get_Index_highestKE_mc_FSPart_WithDeglessthan_NO_NeutralParticles_withKEpion_proton(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector,
      std::vector<double> truedigitEfraction_vector, double KE_pion,
      double KE_proton) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Get_Index_highestKE_mc_FSPart_WithDeglessthan_NO_NeutralParticles_withKEpion_proton(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector,
      double KE_pion, double KE_proton) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int Get_Index_highestKE_mc_FSPart_NO_NeutralParticlesForTruthBranch(
      std::vector<double> KE_vector, std::vector<int> pdg_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Get_Index_highestKE_NOleadingMuoninlist_WithDeglessthan_NO_NeutralParticles(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector,
      std::vector<double> truedigitEfraction_vector) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int
  Get_Index_highestKE_NOleadingMuoninlist_WithDeglessthan_NO_NeutralParticles_WithProton_pionKEthreshold(
      double Angle, std::vector<double> KE_vector,
      std::vector<double> angle_vector, std::vector<int> pdg_vector,
      std::vector<double> truedigitEfraction_vector, double KE_pion,
      double KE_proton) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_P(std::string input) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_InitalPosition(
      std::string input) const;
  //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetVector_ALLTrajector_PDG() const;
  virtual std::vector<double> GetVector_ALLTrajector_FinalPosition(
      std::string input) const;
        //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_Angle() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_DOCA() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GetVector_ALLTrajector_E() const;
    //////////////////////////////////////////////////////////////////////////////
  // virtual std::vector <double> GetCalRecoilEnergy_AnaDevajector_TrkLength()
  // const;
  virtual std::vector<double> GetVector_ALLTrajector_columnarDensity() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_ALLTrajector_tracksize() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual TRUE_RECO_Energies_Trajectors TRUE_RECO_Energies_TrajectorsStuct()
      const;
  //////////////////////////////////////////////////////////////////////////////
  virtual TRUE_RECO_Energies_Trajectors
  TRUE_RECO_Energies_TrajectorsStuct_Parent() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> Get_TRUE_vector_ALL_Event_PDG() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_TRUE_Mother_index() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_TRUE_firstdaughter_index() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Get_TRUE_lastdaughter_index() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> Get_TrueFractionE_vector() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> Get_TRUE_indexs() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPT_new() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPz_new() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPTTrue_new() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetMuonPzTrue_new() const;
    //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////
  /// Master AnaDev Function
  /////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  virtual std::vector<double> GETvector_Pion_T() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<double> GETvector_Pion_Theta() const;
    //////////////////////////////////////////////////////////////////////////////
  std::vector<int> GETindexvector_Pions_Thetalessthan(double input_angle) const;
    //////////////////////////////////////////////////////////////////////////////
  int GetTPion(std::vector<int> index) const;
    //////////////////////////////////////////////////////////////////////////////
  bool IsthereRecoilwithAngleLess(double inputangle) const;
    //////////////////////////////////////////////////////////////////////////////
  bool AreAllPion_theta_equal_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  bool AreAllHadron_equal_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  bool PionRECOtrack_good() const;
    //////////////////////////////////////////////////////////////////////////////
  int getPDG_PionRECOTrack(int index) const;
    //////////////////////////////////////////////////////////////////////////////
  std::vector<double> GETvector_hadron_beginKE() const;
    //////////////////////////////////////////////////////////////////////////////
  int GET_RECO_index_hadron_GreatestKE() const;
    //////////////////////////////////////////////////////////////////////////////
  int FindPionIndex(double input_angle) const;
    //////////////////////////////////////////////////////////////////////////////
  double Get_NonmuTrkANGLE_WRTB_AnaDev(int index) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetDeadTime() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool GetDeadTimeCut() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVxtX() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVxtY() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVxtZ() const;
    //////////////////////////////////////////////////////////////////////////////
  // virtual bool InTracker() const;
  // virtual bool IsinTracker()const;
  // ========================================================================
  // Get Variable Functions
  // Write a virtual "Get" function for _any_ variable (coming directly from a
  // branch, or composed of several branches) that will be laterally shifted
  // or affected by the lateral shift of a systematic universe.
  //
  // We override some or all of these function in different systematic
  // universe classes located in LateralSystematics.h.
  // ========================================================================

  //////////////////////////////////////////////////////////////
  /// Vetowall
  //////////////////////////////////////////////////////////////
  /// End of Fucntion
  /////////////////////////////////////////////////////////////
  // virtual double GetQ2True_GeV() const;
  // virtual double GetMuonPT() const;
  // virtual double GetMuonPz() const;
  // virtual double GetMuonPTTrue() const;
  // virtual double GetMuonPzTrue() const;

  virtual bool isMINOSMatch_bool() const;
    //////////////////////////////////////////////////////////////////////////////
  bool virtual IsMinosMatchMuon() const;
    //////////////////////////////////////////////////////////////////////////////
  // virtual bool InTracker() const;
  virtual double GetCurvatureSignificance_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  // virtual double GetNonCalRecoilEnergy() const=0;
  virtual double GetCalRecoilEnergy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassHelicityCut(HelicityType::t_HelicityType h) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassMuCurveCut(HelicityType::t_HelicityType h) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassMuCurveCut() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassMuCoilCut() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassReco(
      HelicityType::t_HelicityType h = HelicityType::kNeutrino) const;
        //////////////////////////////////////////////////////////////////////////////
  virtual bool TrackerOnly() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool TrackerOnlyTrue() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool InHexagon(double apothem /*= 850.*/) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool InHexagonTrue(double apothem /*= 850.*/) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool PassThetaCut_heliumlike(double angle) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetNTracks() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool Atleast2tracks() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetEventID() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMultiplicity() const;
  //	virtual int GetDeadTime() const;

  // ----------------------- Cut-configuring Functions -------------------------

  static int GetAnalysisNeutrinoPDG();
    //////////////////////////////////////////////////////////////////////////////
  static bool SetAnalysisNeutrinoPDG(int neutrino_pdg, bool print);
    //////////////////////////////////////////////////////////////////////////////
  static double GetMinBlobZVtx();
    //////////////////////////////////////////////////////////////////////////////
  static bool SetMinBlobZVtx(double min_zvtx, bool print);
    //////////////////////////////////////////////////////////////////////////////
  static double GetPhotonEnergyCut();
    //////////////////////////////////////////////////////////////////////////////
  static bool SetPhotonEnergyCut(double energy, bool print);
    //////////////////////////////////////////////////////////////////////////////
  static double GetProtonKECut();
    //////////////////////////////////////////////////////////////////////////////
  static bool SetProtonKECut(double proton_KECut, bool print);
    //////////////////////////////////////////////////////////////////////////////

  // static NuConfig GetProtonScoreConfig(bool print);
  // static bool SetProtonScoreConfig(NuConfig protonScoreConfig, bool print);

  // ----------------------- Analysis-related Variables ------------------------

  virtual int GetIsMinosMatchTrack() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetEnuHadGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueEnuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetEnuCCQEGeV() const;  // both neutrino and antinu
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueEnuCCQEGeV()const;  // may be a better way to implement this
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetQ2QEGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ2QEGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetLog10Q2QEGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueLog10Q2QEGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  // ------------------------------ Muon Variables -----------------------------
  virtual double GetEmuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueEmuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool isEmuGood_TRUE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool IsEmUGoodEnergy_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTRUE_EmuGeVNew() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPmuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTruePmuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  // virtual double GetEmuGeVNew() const;
  virtual double GetPparMuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTruePparMuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPperpMuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTruePperpMuGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueThetaXmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueThetaYmu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueThetamu() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetThetamuDegrees() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueThetamuDegrees() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual bool IsTRUEMuonAngle_HeliumGood(double angle = 12.0) const;
    //////////////////////////////////////////////////////////////////////////////
  // ----------------------------- Hadron Variables ----------------------------
  virtual double GetHadronEGeV() const;
  // ----------------------------- Recoil Variables ----------------------------
  virtual double GetCalRecoilEnergy_AnaDev() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetCalRecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonCalRecoilEnergy() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetNonCalRecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetRecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueRecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetLog10RecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueLog10RecoilEnergyGeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ0GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ3GeV() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueQ2GeV() const;
    //////////////////////////////////////////////////////////////////////////////

  // ----------------------------- Other Variables -----------------------------

  virtual int GetMCIntType() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthNuPDG() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetCurrent() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetTpiGeV(const int hadron) const;

  // --------------------- Quantities only needed for cuts ---------------------
  // Although unlikely, in principle these quanties could be shifted by a
  // systematic. And when they are, they'll only be shifted correctly if we
  // write these accessor functions.
  // virtual bool IsMinosMatchMuon() const; // This isn't even used anymore,
  // there's something else. This is left over from Amit's analysis

  virtual int GetNuHelicity() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetCurvature() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTrueCurvature() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTDead() const;  // Dead electronics, a rock muon removal
                                 // technique. Amit's analysis doesn't
  // have that cut most likely. Not even in that tuple, only reason it survives
  // is bc it's not called anymore.
  // Can't find it? Just a hard coded constant in CCQENuCutsNSF.h

  // These cuts are already made in the CCQENu AnaTuple, may be unnecessary
  ROOT::Math::XYZTVector GetVertex() const;

  // 1-d apothems for cuts

  double GetApothemY() const;
    //////////////////////////////////////////////////////////////////////////////
  double GetApothemX() const;
    //////////////////////////////////////////////////////////////////////////////
  double GetTrueApothemY() const;
    //////////////////////////////////////////////////////////////////////////////
  double GetTrueApothemX() const;
    //////////////////////////////////////////////////////////////////////////////

  double GetZVertex() const;
    //////////////////////////////////////////////////////////////////////////////
  ROOT::Math::XYZTVector GetTrueVertex() const;
    //////////////////////////////////////////////////////////////////////////////
  double GetTrueZVertex() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetRun() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetSubRun() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetGate() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueRun() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueSubRun() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueGate() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetGoodRecoil() const;  // implement Cheryl's cut
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthIsCC() const;
    //////////////////////////////////////////////////////////////////////////////
  bool passTrueCCQELike(bool neutrinoMode, std::vector<int> mc_FSPartPDG,
                        std::vector<double> mc_FSPartE, int mc_nFSPart,
                        double proton_KECut) const;
//////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthIsCCQELike() const;  // cut hardwired for now

  // all CCQElike without proton cut enabled

  virtual int GetTruthIsCCQELikeAll() const;  // cut hardwired for now
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthIsQELike() const;

  // ----------------------- Sean Neutrino Functions
  // ------------------------------------------

  // Interaction Vertex
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetHasInteractionVertex() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetNBlobs() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetNMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetMichelVertexType() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetImprovedNMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetImprovedMichelMatch() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetFittedNMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int> GetFittedMichelFitPass() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetHasMichelElectron() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetHasImprovedMichelElectron() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueFittedNMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasImprovedMichel() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetHasMichelOrNBlobs() const;
    //////////////////////////////////////////////////////////////////////////////
  // Charged and Neutral Pions
  virtual int GetTruthCCQELikeExceptForChargedPions() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasSingleChargedPion() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasSingleNeutralPion() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasMultiPion() const;
    //////////////////////////////////////////////////////////////////////////////
  // Proton Score, Primary and Secondary Proton Tracks
  virtual double GetProtonScore(int i) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore1(int i) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_0() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_1() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_2() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_3() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_4() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_5() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_6() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_7() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_8() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetProtonScore_9() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetPassProtonScoreCut(double score, double tree_Q2) const;
  virtual int GetPassScoreCutProton_0() const;
  virtual int GetPassScoreCutProton_1() const;
  virtual int GetPassScoreCutProton_2() const;
  virtual int GetPassScoreCutProton_3() const;
  virtual int GetPassScoreCutProton_4() const;
  virtual int GetPassScoreCutProton_5() const;
  virtual int GetPassScoreCutProton_6() const;
  virtual int GetPassScoreCutProton_7() const;
  virtual int GetPassScoreCutProton_8() const;
  virtual int GetPassScoreCutProton_9() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetSecondaryProtonCandidateCount() const;
  virtual int GetSecondaryProtonCandidateCount1() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonScore() const;
  virtual double GetPrimaryProtonScore1() const;
  virtual double GetPrimaryProtonScore2() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryPionScore() const;
  virtual double GetPrimaryPionScore1() const;
  virtual double GetPrimaryPionScore2() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetAreClustsFoundAtPrimaryProtonEnd() const;
  virtual int GetNumClustsPrimaryProtonEnd() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonTrackLength() const;
  virtual double GetPrimaryProtonTrackLength_cm() const;
  virtual double GetPrimaryProtonTrackEndX() const;
  virtual double GetPrimaryProtonTrackEndY() const;
  virtual double GetPrimaryProtonTrackEndZ() const;
  virtual double GetPrimaryProtonAngle() const;
  //////////////////////////////////////////////////////////////////////////////
  // virtual double GetPrimaryPionTrackLength() const;
  // virtual double GetPrimaryPionTrackEndX() const;
  // virtual double GetPrimaryPionTrackEndY() const;
  // virtual double GetPrimaryPionTrackEndZ() const;
  // virtual double GetPrimaryPionAngle() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonThetafromdEdx() const;
  virtual double GetSecondaryProtonThetafromdEdx() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual double GetCalibEClustsPrimaryProtonEnd() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetVisEClustsPrimaryProtonEnd() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonTfromdEdx() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetSecondaryProtonTfromdEdx() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetTotalPrimaryProtonEnergydEdxAndClusters() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonTrueKE() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetPrimaryProtonCandidatePDG() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetEnergyDiffTruedEdx() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual double GetPrimaryProtonFractionEnergyInCone() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetRecoTruthIsPrimaryProton() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetRecoTruthIsPrimaryPion() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetRecoTruthIsPrimaryOther() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetIsPrimaryProton() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetIsPrimaryProton1() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruthHasSingleProton() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetPassAllProtonScoreCuts(std::vector<double> scores,
                                        double tree_Q2) const;
  virtual int GetAllExtraTracksProtons() const;
  virtual int GetAllExtraTracksProtons1() const;
  virtual int GetProtonCount() const;
  virtual int GetProtonCount1() const;
  //////////////////////////////////////////////////////////////////////////////
  // GENIE Particle Counts
  //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueNumberOfFSParticles() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueChargedPionCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueNeutralPionCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTruePionCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueProtonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueLightMesonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueCharmedMesonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueStrangeMesonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueCharmedBaryonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetTrueStrangeBaryonCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetEventRecordTrueEtaCount() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCTargetA() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCTargetZ() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GetMCTargetNucleon() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int Dummy() const;
  //////////////////////////////////////////////////////////////////////////////
  // Arachne
  //////////////////////////////////////////////////////////////////////////////
  virtual void PrintTrueArachneLink() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual void PrintDataArachneLink() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual void Print() const;
  //////////////////////////////////////////////////////////////////////////////
  virtual bool PassTrueFiducial();
  virtual std::vector<int> GETvector_Pion_InRecoBranch_getTrueTrackID() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual int GET_index_Pion_InRecoBranch_getTrueTrackID(int index) const;
    //////////////////////////////////////////////////////////////////////////////
  virtual std::vector<int>
  GETvector_Pion_InRecoBranch_getTrueTrackID_corrected() const;
    //////////////////////////////////////////////////////////////////////////////
  virtual CH_Signal_type return_CH_Sigal_type(
      Particle_type Particle_type) const;
  //////////////////////////////////////////////////////////////////////////////
};  // End of Header

#endif
